
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c2c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000df0  08000df0  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000df0  08000df0  00020414  2**0
                  CONTENTS
  4 .ARM          00000000  08000df0  08000df0  00020414  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000df0  08000df0  00020414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000df0  08000df0  00010df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000df4  08000df4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000414  20000000  08000df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000414  0800120c  00020414  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800120c  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY
 12 .debug_line   000020ea  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00001921  00000000  00000000  0002252e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005f3  00000000  00000000  00023e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00024448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000ac24  00000000  00000000  000245d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000148  00000000  00000000  0002f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001191  00000000  00000000  0002f348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000304d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000558  00000000  00000000  0003052c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000414 	.word	0x20000414
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000dd8 	.word	0x08000dd8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000418 	.word	0x20000418
 8000200:	08000dd8 	.word	0x08000dd8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000214:	480d      	ldr	r0, [pc, #52]	; (800024c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000216:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000218:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800021c:	480c      	ldr	r0, [pc, #48]	; (8000250 <LoopForever+0x6>)
  ldr r1, =_edata
 800021e:	490d      	ldr	r1, [pc, #52]	; (8000254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000220:	4a0d      	ldr	r2, [pc, #52]	; (8000258 <LoopForever+0xe>)
  movs r3, #0
 8000222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000224:	e002      	b.n	800022c <LoopCopyDataInit>

08000226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800022a:	3304      	adds	r3, #4

0800022c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800022c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000230:	d3f9      	bcc.n	8000226 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000232:	4a0a      	ldr	r2, [pc, #40]	; (800025c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000234:	4c0a      	ldr	r4, [pc, #40]	; (8000260 <LoopForever+0x16>)
  movs r3, #0
 8000236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000238:	e001      	b.n	800023e <LoopFillZerobss>

0800023a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800023a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800023c:	3204      	adds	r2, #4

0800023e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000240:	d3fb      	bcc.n	800023a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000242:	f000 fda5 	bl	8000d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000246:	f000 fd7b 	bl	8000d40 <main>

0800024a <LoopForever>:

LoopForever:
  b LoopForever
 800024a:	e7fe      	b.n	800024a <LoopForever>
  ldr   r0, =_estack
 800024c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000254:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 8000258:	08000df8 	.word	0x08000df8
  ldr r2, =_sbss
 800025c:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000260:	20000454 	.word	0x20000454

08000264 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC_IRQHandler>
	...

08000268 <GPIO_PeriClockControl>:

#include "gpio_driver.h"

/* Peripheral Clock setup */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	460b      	mov	r3, r1
 8000272:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000274:	78fb      	ldrb	r3, [r7, #3]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d157      	bne.n	800032a <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4a59      	ldr	r2, [pc, #356]	; (80003e4 <GPIO_PeriClockControl+0x17c>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000282:	4b59      	ldr	r3, [pc, #356]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000286:	4a58      	ldr	r2, [pc, #352]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6313      	str	r3, [r2, #48]	; 0x30
				{
					GPIOH_PCLK_DI();
				}
	}

}
 800028e:	e0a3      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOB)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	4a56      	ldr	r2, [pc, #344]	; (80003ec <GPIO_PeriClockControl+0x184>)
 8000294:	4293      	cmp	r3, r2
 8000296:	d106      	bne.n	80002a6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000298:	4b53      	ldr	r3, [pc, #332]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800029a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029c:	4a52      	ldr	r2, [pc, #328]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800029e:	f043 0302 	orr.w	r3, r3, #2
 80002a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a4:	e098      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOC)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a51      	ldr	r2, [pc, #324]	; (80003f0 <GPIO_PeriClockControl+0x188>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d106      	bne.n	80002bc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002ae:	4b4e      	ldr	r3, [pc, #312]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b2:	4a4d      	ldr	r2, [pc, #308]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002b4:	f043 0304 	orr.w	r3, r3, #4
 80002b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ba:	e08d      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOD)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a4d      	ldr	r2, [pc, #308]	; (80003f4 <GPIO_PeriClockControl+0x18c>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d106      	bne.n	80002d2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002c4:	4b48      	ldr	r3, [pc, #288]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4a47      	ldr	r2, [pc, #284]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d0:	e082      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOE)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a48      	ldr	r2, [pc, #288]	; (80003f8 <GPIO_PeriClockControl+0x190>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002da:	4b43      	ldr	r3, [pc, #268]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a42      	ldr	r2, [pc, #264]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002e0:	f043 0310 	orr.w	r3, r3, #16
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002e6:	e077      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOF)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a44      	ldr	r2, [pc, #272]	; (80003fc <GPIO_PeriClockControl+0x194>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002f0:	4b3d      	ldr	r3, [pc, #244]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a3c      	ldr	r2, [pc, #240]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002fc:	e06c      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOG)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a3f      	ldr	r2, [pc, #252]	; (8000400 <GPIO_PeriClockControl+0x198>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000306:	4b38      	ldr	r3, [pc, #224]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a37      	ldr	r2, [pc, #220]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800030c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000312:	e061      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		}else if (pGPIOx == GPIOH)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a3b      	ldr	r2, [pc, #236]	; (8000404 <GPIO_PeriClockControl+0x19c>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d15d      	bne.n	80003d8 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 800031c:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a31      	ldr	r2, [pc, #196]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000328:	e056      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a2d      	ldr	r2, [pc, #180]	; (80003e4 <GPIO_PeriClockControl+0x17c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0xd8>
					GPIOA_PCLK_DI();
 8000332:	4b2d      	ldr	r3, [pc, #180]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a2c      	ldr	r2, [pc, #176]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000338:	f023 0301 	bic.w	r3, r3, #1
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800033e:	e04b      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
				}else if (pGPIOx == GPIOB)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a2a      	ldr	r2, [pc, #168]	; (80003ec <GPIO_PeriClockControl+0x184>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClockControl+0xee>
					GPIOB_PCLK_DI();
 8000348:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800034e:	f023 0302 	bic.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000354:	e040      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
				}else if (pGPIOx == GPIOC)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a25      	ldr	r2, [pc, #148]	; (80003f0 <GPIO_PeriClockControl+0x188>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClockControl+0x104>
					GPIOC_PCLK_DI();
 800035e:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a21      	ldr	r2, [pc, #132]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000364:	f023 0304 	bic.w	r3, r3, #4
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036a:	e035      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
				}else if (pGPIOx == GPIOD)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <GPIO_PeriClockControl+0x18c>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d106      	bne.n	8000382 <GPIO_PeriClockControl+0x11a>
					GPIOD_PCLK_DI();
 8000374:	4b1c      	ldr	r3, [pc, #112]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a1b      	ldr	r2, [pc, #108]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800037a:	f023 0308 	bic.w	r3, r3, #8
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000380:	e02a      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
				}else if (pGPIOx == GPIOE)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <GPIO_PeriClockControl+0x190>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d106      	bne.n	8000398 <GPIO_PeriClockControl+0x130>
					GPIOE_PCLK_DI();
 800038a:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 800038c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038e:	4a16      	ldr	r2, [pc, #88]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 8000390:	f023 0310 	bic.w	r3, r3, #16
 8000394:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000396:	e01f      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
				}else if (pGPIOx == GPIOF)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a18      	ldr	r2, [pc, #96]	; (80003fc <GPIO_PeriClockControl+0x194>)
 800039c:	4293      	cmp	r3, r2
 800039e:	d106      	bne.n	80003ae <GPIO_PeriClockControl+0x146>
					GPIOF_PCLK_DI();
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a4:	4a10      	ldr	r2, [pc, #64]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80003a6:	f023 0320 	bic.w	r3, r3, #32
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ac:	e014      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
				}else if (pGPIOx == GPIOG)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <GPIO_PeriClockControl+0x198>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d106      	bne.n	80003c4 <GPIO_PeriClockControl+0x15c>
					GPIOG_PCLK_DI();
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ba:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80003bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c2:	e009      	b.n	80003d8 <GPIO_PeriClockControl+0x170>
				}else if (pGPIOx == GPIOH)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <GPIO_PeriClockControl+0x19c>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d105      	bne.n	80003d8 <GPIO_PeriClockControl+0x170>
					GPIOH_PCLK_DI();
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80003ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d0:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <GPIO_PeriClockControl+0x180>)
 80003d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40020000 	.word	0x40020000
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020400 	.word	0x40020400
 80003f0:	40020800 	.word	0x40020800
 80003f4:	40020c00 	.word	0x40020c00
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40021400 	.word	0x40021400
 8000400:	40021800 	.word	0x40021800
 8000404:	40021c00 	.word	0x40021c00

08000408 <GPIO_Init>:

/* Init and De-init */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]

	uint32_t temp=0; //temp. register
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2101      	movs	r1, #1
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff24 	bl	8000268 <GPIO_PeriClockControl>

	//1 . configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	795b      	ldrb	r3, [r3, #5]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d820      	bhi.n	800046a <GPIO_Init+0x62>
	//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	795b      	ldrb	r3, [r3, #5]
 800042c:	461a      	mov	r2, r3
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	791b      	ldrb	r3, [r3, #4]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	2103      	movs	r1, #3
 8000448:	fa01 f303 	lsl.w	r3, r1, r3
 800044c:	43db      	mvns	r3, r3
 800044e:	4619      	mov	r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	400a      	ands	r2, r1
 8000456:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	6819      	ldr	r1, [r3, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	697a      	ldr	r2, [r7, #20]
 8000464:	430a      	orrs	r2, r1
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	e0c1      	b.n	80005ee <GPIO_Init+0x1e6>

	}
	else{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	795b      	ldrb	r3, [r3, #5]
 800046e:	2b04      	cmp	r3, #4
 8000470:	d117      	bne.n	80004a2 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000472:	4b47      	ldr	r3, [pc, #284]	; (8000590 <GPIO_Init+0x188>)
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	7912      	ldrb	r2, [r2, #4]
 800047a:	4611      	mov	r1, r2
 800047c:	2201      	movs	r2, #1
 800047e:	408a      	lsls	r2, r1
 8000480:	4611      	mov	r1, r2
 8000482:	4a43      	ldr	r2, [pc, #268]	; (8000590 <GPIO_Init+0x188>)
 8000484:	430b      	orrs	r3, r1
 8000486:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000488:	4b41      	ldr	r3, [pc, #260]	; (8000590 <GPIO_Init+0x188>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	7912      	ldrb	r2, [r2, #4]
 8000490:	4611      	mov	r1, r2
 8000492:	2201      	movs	r2, #1
 8000494:	408a      	lsls	r2, r1
 8000496:	43d2      	mvns	r2, r2
 8000498:	4611      	mov	r1, r2
 800049a:	4a3d      	ldr	r2, [pc, #244]	; (8000590 <GPIO_Init+0x188>)
 800049c:	400b      	ands	r3, r1
 800049e:	6093      	str	r3, [r2, #8]
 80004a0:	e035      	b.n	800050e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	2b05      	cmp	r3, #5
 80004a8:	d117      	bne.n	80004da <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004aa:	4b39      	ldr	r3, [pc, #228]	; (8000590 <GPIO_Init+0x188>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	7912      	ldrb	r2, [r2, #4]
 80004b2:	4611      	mov	r1, r2
 80004b4:	2201      	movs	r2, #1
 80004b6:	408a      	lsls	r2, r1
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a35      	ldr	r2, [pc, #212]	; (8000590 <GPIO_Init+0x188>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c0:	4b33      	ldr	r3, [pc, #204]	; (8000590 <GPIO_Init+0x188>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7912      	ldrb	r2, [r2, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	408a      	lsls	r2, r1
 80004ce:	43d2      	mvns	r2, r2
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a2f      	ldr	r2, [pc, #188]	; (8000590 <GPIO_Init+0x188>)
 80004d4:	400b      	ands	r3, r1
 80004d6:	60d3      	str	r3, [r2, #12]
 80004d8:	e019      	b.n	800050e <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	2b06      	cmp	r3, #6
 80004e0:	d115      	bne.n	800050e <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <GPIO_Init+0x188>)
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	7912      	ldrb	r2, [r2, #4]
 80004ea:	4611      	mov	r1, r2
 80004ec:	2201      	movs	r2, #1
 80004ee:	408a      	lsls	r2, r1
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a27      	ldr	r2, [pc, #156]	; (8000590 <GPIO_Init+0x188>)
 80004f4:	430b      	orrs	r3, r1
 80004f6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f8:	4b25      	ldr	r3, [pc, #148]	; (8000590 <GPIO_Init+0x188>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	7912      	ldrb	r2, [r2, #4]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	4611      	mov	r1, r2
 8000508:	4a21      	ldr	r2, [pc, #132]	; (8000590 <GPIO_Init+0x188>)
 800050a:	430b      	orrs	r3, r1
 800050c:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	791b      	ldrb	r3, [r3, #4]
 8000512:	089b      	lsrs	r3, r3, #2
 8000514:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	791b      	ldrb	r3, [r3, #4]
 800051a:	f003 0303 	and.w	r3, r3, #3
 800051e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1b      	ldr	r2, [pc, #108]	; (8000594 <GPIO_Init+0x18c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d044      	beq.n	80005b4 <GPIO_Init+0x1ac>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <GPIO_Init+0x190>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d02b      	beq.n	800058c <GPIO_Init+0x184>
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <GPIO_Init+0x194>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d024      	beq.n	8000588 <GPIO_Init+0x180>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <GPIO_Init+0x198>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d01d      	beq.n	8000584 <GPIO_Init+0x17c>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <GPIO_Init+0x19c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d016      	beq.n	8000580 <GPIO_Init+0x178>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a14      	ldr	r2, [pc, #80]	; (80005a8 <GPIO_Init+0x1a0>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d00f      	beq.n	800057c <GPIO_Init+0x174>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a12      	ldr	r2, [pc, #72]	; (80005ac <GPIO_Init+0x1a4>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d008      	beq.n	8000578 <GPIO_Init+0x170>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <GPIO_Init+0x1a8>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d101      	bne.n	8000574 <GPIO_Init+0x16c>
 8000570:	2307      	movs	r3, #7
 8000572:	e020      	b.n	80005b6 <GPIO_Init+0x1ae>
 8000574:	2300      	movs	r3, #0
 8000576:	e01e      	b.n	80005b6 <GPIO_Init+0x1ae>
 8000578:	2306      	movs	r3, #6
 800057a:	e01c      	b.n	80005b6 <GPIO_Init+0x1ae>
 800057c:	2305      	movs	r3, #5
 800057e:	e01a      	b.n	80005b6 <GPIO_Init+0x1ae>
 8000580:	2304      	movs	r3, #4
 8000582:	e018      	b.n	80005b6 <GPIO_Init+0x1ae>
 8000584:	2303      	movs	r3, #3
 8000586:	e016      	b.n	80005b6 <GPIO_Init+0x1ae>
 8000588:	2302      	movs	r3, #2
 800058a:	e014      	b.n	80005b6 <GPIO_Init+0x1ae>
 800058c:	2301      	movs	r3, #1
 800058e:	e012      	b.n	80005b6 <GPIO_Init+0x1ae>
 8000590:	40013c00 	.word	0x40013c00
 8000594:	40020000 	.word	0x40020000
 8000598:	40020400 	.word	0x40020400
 800059c:	40020800 	.word	0x40020800
 80005a0:	40020c00 	.word	0x40020c00
 80005a4:	40021000 	.word	0x40021000
 80005a8:	40021400 	.word	0x40021400
 80005ac:	40021800 	.word	0x40021800
 80005b0:	40021c00 	.word	0x40021c00
 80005b4:	2300      	movs	r3, #0
 80005b6:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005b8:	4b59      	ldr	r3, [pc, #356]	; (8000720 <GPIO_Init+0x318>)
 80005ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005bc:	4a58      	ldr	r2, [pc, #352]	; (8000720 <GPIO_Init+0x318>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80005c4:	7c7a      	ldrb	r2, [r7, #17]
 80005c6:	7cbb      	ldrb	r3, [r7, #18]
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	fa02 f103 	lsl.w	r1, r2, r3
 80005ce:	4a55      	ldr	r2, [pc, #340]	; (8000724 <GPIO_Init+0x31c>)
 80005d0:	7cfb      	ldrb	r3, [r7, #19]
 80005d2:	3302      	adds	r3, #2
 80005d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005d8:	4b53      	ldr	r3, [pc, #332]	; (8000728 <GPIO_Init+0x320>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	7912      	ldrb	r2, [r2, #4]
 80005e0:	4611      	mov	r1, r2
 80005e2:	2201      	movs	r2, #1
 80005e4:	408a      	lsls	r2, r1
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a4f      	ldr	r2, [pc, #316]	; (8000728 <GPIO_Init+0x320>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6013      	str	r3, [r2, #0]
	}
	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	799b      	ldrb	r3, [r3, #6]
 80005f2:	461a      	mov	r2, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	005b      	lsls	r3, r3, #1
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	689a      	ldr	r2, [r3, #8]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	2103      	movs	r1, #3
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43db      	mvns	r3, r3
 8000614:	4619      	mov	r1, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	400a      	ands	r2, r1
 800061c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	6899      	ldr	r1, [r3, #8]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	697a      	ldr	r2, [r7, #20]
 800062a:	430a      	orrs	r2, r1
 800062c:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	79db      	ldrb	r3, [r3, #7]
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68da      	ldr	r2, [r3, #12]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	2103      	movs	r1, #3
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	43db      	mvns	r3, r3
 8000654:	4619      	mov	r1, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	400a      	ands	r2, r1
 800065c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68d9      	ldr	r1, [r3, #12]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	430a      	orrs	r2, r1
 800066c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	7a1b      	ldrb	r3, [r3, #8]
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	685a      	ldr	r2, [r3, #4]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	791b      	ldrb	r3, [r3, #4]
 8000688:	4619      	mov	r1, r3
 800068a:	2301      	movs	r3, #1
 800068c:	408b      	lsls	r3, r1
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	6859      	ldr	r1, [r3, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d131      	bne.n	8000716 <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	08db      	lsrs	r3, r3, #3
 80006b8:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	7c3a      	ldrb	r2, [r7, #16]
 80006ca:	3208      	adds	r2, #8
 80006cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	220f      	movs	r2, #15
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	43db      	mvns	r3, r3
 80006dc:	4618      	mov	r0, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	7c3a      	ldrb	r2, [r7, #16]
 80006e4:	4001      	ands	r1, r0
 80006e6:	3208      	adds	r2, #8
 80006e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	7c3a      	ldrb	r2, [r7, #16]
 80006f2:	3208      	adds	r2, #8
 80006f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	7a5b      	ldrb	r3, [r3, #9]
 80006fc:	461a      	mov	r2, r3
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	4618      	mov	r0, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	7c3a      	ldrb	r2, [r7, #16]
 800070e:	4301      	orrs	r1, r0
 8000710:	3208      	adds	r2, #8
 8000712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40013800 	.word	0x40013800
 8000728:	40013c00 	.word	0x40013c00

0800072c <GPIO_ReadFromInputPin>:
		}
}

/* Data read and write */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	691a      	ldr	r2, [r3, #16]
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	fa22 f303 	lsr.w	r3, r2, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	73fb      	strb	r3, [r7, #15]

   return value;
 800074a:	7bfb      	ldrb	r3, [r7, #15]
}
 800074c:	4618      	mov	r0, r3
 800074e:	3714      	adds	r7, #20
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <RCC_GetPCLK1Value+0x9c>)
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	089b      	lsrs	r3, r3, #2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800076c:	7a7b      	ldrb	r3, [r7, #9]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000772:	4b21      	ldr	r3, [pc, #132]	; (80007f8 <RCC_GetPCLK1Value+0xa0>)
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e00b      	b.n	8000790 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000778:	7a7b      	ldrb	r3, [r7, #9]
 800077a:	2b01      	cmp	r3, #1
 800077c:	d102      	bne.n	8000784 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800077e:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <RCC_GetPCLK1Value+0xa4>)
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	e005      	b.n	8000790 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000784:	7a7b      	ldrb	r3, [r7, #9]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d102      	bne.n	8000790 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800078a:	f000 f88d 	bl	80008a8 <RCC_GetPLLOutputClock>
 800078e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <RCC_GetPCLK1Value+0x9c>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	091b      	lsrs	r3, r3, #4
 8000796:	b2db      	uxtb	r3, r3
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800079e:	7a3b      	ldrb	r3, [r7, #8]
 80007a0:	2b07      	cmp	r3, #7
 80007a2:	d802      	bhi.n	80007aa <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	72fb      	strb	r3, [r7, #11]
 80007a8:	e005      	b.n	80007b6 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80007aa:	7a3b      	ldrb	r3, [r7, #8]
 80007ac:	3b08      	subs	r3, #8
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <RCC_GetPCLK1Value+0xa8>)
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <RCC_GetPCLK1Value+0x9c>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	0a9b      	lsrs	r3, r3, #10
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f003 0307 	and.w	r3, r3, #7
 80007c2:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80007c4:	7a3b      	ldrb	r3, [r7, #8]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d802      	bhi.n	80007d0 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	72bb      	strb	r3, [r7, #10]
 80007ce:	e004      	b.n	80007da <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 80007d0:	7a3b      	ldrb	r3, [r7, #8]
 80007d2:	3b04      	subs	r3, #4
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <RCC_GetPCLK1Value+0xac>)
 80007d6:	5cd3      	ldrb	r3, [r2, r3]
 80007d8:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 80007da:	7afb      	ldrb	r3, [r7, #11]
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	fbb2 f2f3 	udiv	r2, r2, r3
 80007e2:	7abb      	ldrb	r3, [r7, #10]
 80007e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e8:	607b      	str	r3, [r7, #4]

	return pclk1;
 80007ea:	687b      	ldr	r3, [r7, #4]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	00f42400 	.word	0x00f42400
 80007fc:	007a1200 	.word	0x007a1200
 8000800:	20000000 	.word	0x20000000
 8000804:	20000010 	.word	0x20000010

08000808 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <RCC_GetPCLK2Value+0x8c>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	089b      	lsrs	r3, r3, #2
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f003 0303 	and.w	r3, r3, #3
 800081e:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000820:	7a7b      	ldrb	r3, [r7, #9]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d102      	bne.n	800082c <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <RCC_GetPCLK2Value+0x90>)
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	e001      	b.n	8000830 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <RCC_GetPCLK2Value+0x94>)
 800082e:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <RCC_GetPCLK2Value+0x8c>)
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	091b      	lsrs	r3, r3, #4
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b07      	cmp	r3, #7
 8000840:	d802      	bhi.n	8000848 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	72fb      	strb	r3, [r7, #11]
 8000846:	e005      	b.n	8000854 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b08      	subs	r3, #8
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <RCC_GetPCLK2Value+0x98>)
 800084e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000852:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <RCC_GetPCLK2Value+0x8c>)
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	0b5b      	lsrs	r3, r3, #13
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b03      	cmp	r3, #3
 8000864:	d802      	bhi.n	800086c <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000866:	2301      	movs	r3, #1
 8000868:	72bb      	strb	r3, [r7, #10]
 800086a:	e004      	b.n	8000876 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b04      	subs	r3, #4
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <RCC_GetPCLK2Value+0x9c>)
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000876:	7afb      	ldrb	r3, [r7, #11]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	fbb2 f2f3 	udiv	r2, r2, r3
 800087e:	7abb      	ldrb	r3, [r7, #10]
 8000880:	fbb2 f3f3 	udiv	r3, r2, r3
 8000884:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000886:	683b      	ldr	r3, [r7, #0]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40023800 	.word	0x40023800
 8000898:	00f42400 	.word	0x00f42400
 800089c:	007a1200 	.word	0x007a1200
 80008a0:	20000000 	.word	0x20000000
 80008a4:	20000010 	.word	0x20000010

080008a8 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

	return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <USART_SetBaudRate>:
 *
 * @Note              -

 */
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg=0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]

	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a31      	ldr	r2, [pc, #196]	; (8000990 <USART_SetBaudRate+0xd8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d003      	beq.n	80008d6 <USART_SetBaudRate+0x1e>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a30      	ldr	r2, [pc, #192]	; (8000994 <USART_SetBaudRate+0xdc>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d103      	bne.n	80008de <USART_SetBaudRate+0x26>
	{
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 80008d6:	f7ff ff97 	bl	8000808 <RCC_GetPCLK2Value>
 80008da:	61f8      	str	r0, [r7, #28]
 80008dc:	e002      	b.n	80008e4 <USART_SetBaudRate+0x2c>
	}else
	{
	   PCLKx = RCC_GetPCLK1Value();
 80008de:	f7ff ff3b 	bl	8000758 <RCC_GetPCLK1Value>
 80008e2:	61f8      	str	r0, [r7, #28]
	}

	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00b      	beq.n	8000908 <USART_SetBaudRate+0x50>
	{
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 80008f0:	69fa      	ldr	r2, [r7, #28]
 80008f2:	4613      	mov	r3, r2
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	4413      	add	r3, r2
 80008f8:	009a      	lsls	r2, r3, #2
 80008fa:	441a      	add	r2, r3
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	e00a      	b.n	800091e <USART_SetBaudRate+0x66>
	}else
	{
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	4613      	mov	r3, r2
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	4413      	add	r3, r2
 8000910:	009a      	lsls	r2, r3, #2
 8000912:	441a      	add	r2, r3
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	fbb2 f3f3 	udiv	r3, r2, r3
 800091c:	61bb      	str	r3, [r7, #24]
	}

	//Calculate the Mantissa part
	M_part = usartdiv/100;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	4a1d      	ldr	r2, [pc, #116]	; (8000998 <USART_SetBaudRate+0xe0>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	095b      	lsrs	r3, r3, #5
 8000928:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	011b      	lsls	r3, r3, #4
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	fb02 f303 	mul.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	68db      	ldr	r3, [r3, #12]
 8000946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d00a      	beq.n	8000964 <USART_SetBaudRate+0xac>
	{
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	00db      	lsls	r3, r3, #3
 8000952:	3332      	adds	r3, #50	; 0x32
 8000954:	4a10      	ldr	r2, [pc, #64]	; (8000998 <USART_SetBaudRate+0xe0>)
 8000956:	fba2 2303 	umull	r2, r3, r2, r3
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	e009      	b.n	8000978 <USART_SetBaudRate+0xc0>

	}else
	{
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	3332      	adds	r3, #50	; 0x32
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <USART_SetBaudRate+0xe0>)
 800096c:	fba2 2303 	umull	r2, r3, r2, r3
 8000970:	095b      	lsrs	r3, r3, #5
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	617b      	str	r3, [r7, #20]

	}

	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	4313      	orrs	r3, r2
 800097e:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	609a      	str	r2, [r3, #8]
}
 8000986:	bf00      	nop
 8000988:	3720      	adds	r7, #32
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40011000 	.word	0x40011000
 8000994:	40011400 	.word	0x40011400
 8000998:	51eb851f 	.word	0x51eb851f

0800099c <USART_Init>:
 *
 * @Note              -

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f894 	bl	8000adc <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	791b      	ldrb	r3, [r3, #4]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d104      	bne.n	80009c6 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	e010      	b.n	80009e8 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	791b      	ldrb	r3, [r3, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d104      	bne.n	80009d8 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	e007      	b.n	80009e8 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d103      	bne.n	80009e8 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f043 030c 	orr.w	r3, r3, #12
 80009e6:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7b5b      	ldrb	r3, [r3, #13]
 80009ec:	031b      	lsls	r3, r3, #12
 80009ee:	461a      	mov	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7b9b      	ldrb	r3, [r3, #14]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d104      	bne.n	8000a08 <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	e00b      	b.n	8000a20 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7b9b      	ldrb	r3, [r3, #14]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d107      	bne.n	8000a20 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a16:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7b1b      	ldrb	r3, [r3, #12]
 8000a30:	031b      	lsls	r3, r3, #12
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	7bdb      	ldrb	r3, [r3, #15]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d104      	bne.n	8000a58 <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	e014      	b.n	8000a82 <USART_Init+0xe6>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7bdb      	ldrb	r3, [r3, #15]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d104      	bne.n	8000a6a <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e00b      	b.n	8000a82 <USART_Init+0xe6>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	7bdb      	ldrb	r3, [r3, #15]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d107      	bne.n	8000a82 <USART_Init+0xe6>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a78:	60fb      	str	r3, [r7, #12]
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a80:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	68fa      	ldr	r2, [r7, #12]
 8000a88:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4610      	mov	r0, r2
 8000a96:	f7ff ff0f 	bl	80008b8 <USART_SetBaudRate>

}
 8000a9a:	bf00      	nop
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <USART_PeripheralControl>:
 *
 * @Note              -

 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	b083      	sub	sp, #12
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d106      	bne.n	8000ac2 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 13);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	60da      	str	r2, [r3, #12]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 13);
	}

}
 8000ac0:	e005      	b.n	8000ace <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 13);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	60da      	str	r2, [r3, #12]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <USART_PeriClockControl>:
 *
 * @Note              -

 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d12a      	bne.n	8000b44 <USART_PeriClockControl+0x68>
	{
		if(pUSARTx == USART1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <USART_PeriClockControl+0x74>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d106      	bne.n	8000b04 <USART_PeriClockControl+0x28>
		{
			USART1_PCCK_EN();
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000afc:	f043 0310 	orr.w	r3, r3, #16
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
	else
	{
		//TODO
	}

}
 8000b02:	e01f      	b.n	8000b44 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <USART_PeriClockControl+0x7c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d106      	bne.n	8000b1a <USART_PeriClockControl+0x3e>
			USART2_PCCK_EN();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b18:	e014      	b.n	8000b44 <USART_PeriClockControl+0x68>
		}else if (pUSARTx == USART3)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <USART_PeriClockControl+0x80>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d106      	bne.n	8000b30 <USART_PeriClockControl+0x54>
			USART3_PCCK_EN();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2e:	e009      	b.n	8000b44 <USART_PeriClockControl+0x68>
		else if (pUSARTx == UART4)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <USART_PeriClockControl+0x84>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d105      	bne.n	8000b44 <USART_PeriClockControl+0x68>
			UART4_PCCK_EN();
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <USART_PeriClockControl+0x78>)
 8000b3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40004c00 	.word	0x40004c00

08000b64 <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->SR & StatusFlagName)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	4013      	ands	r3, r2
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e031      	b.n	8000c04 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000ba0:	bf00      	nop
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	2180      	movs	r1, #128	; 0x80
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff ffdb 	bl	8000b64 <USART_GetFlagStatus>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d0f6      	beq.n	8000ba2 <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	7b5b      	ldrb	r3, [r3, #13]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d118      	bne.n	8000bee <USART_SendData+0x60>
		{
			//if 9BIT load the DR with 2bytes masking  the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bce:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	7b9b      	ldrb	r3, [r3, #14]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d106      	bne.n	8000be6 <USART_SendData+0x58>
			{
				//No parity is used in this transfer , so 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	e00b      	b.n	8000bfe <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	e007      	b.n	8000bfe <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d3c9      	bcc.n	8000ba0 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000c0c:	bf00      	nop
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2140      	movs	r1, #64	; 0x40
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ffa5 	bl	8000b64 <USART_GetFlagStatus>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f6      	beq.n	8000c0e <USART_SendData+0x80>
}
 8000c20:	bf00      	nop
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <USART2_Init+0x3c>)
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <USART2_Init+0x40>)
 8000c34:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <USART2_Init+0x3c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <USART2_Init+0x3c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <USART2_Init+0x3c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <USART2_Init+0x3c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <USART2_Init+0x3c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <USART2_Init+0x3c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <USART2_Init+0x3c>)
 8000c5e:	f7ff fe9d 	bl	800099c <USART_Init>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000430 	.word	0x20000430
 8000c6c:	40004400 	.word	0x40004400

08000c70 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <USART2_GPIOInit+0x40>)
 8000c78:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000c82:	2301      	movs	r3, #1
 8000c84:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c86:	2302      	movs	r3, #2
 8000c88:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fbb7 	bl	8000408 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fbb1 	bl	8000408 <GPIO_Init>


}
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020000 	.word	0x40020000

08000cb4 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOC;
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <GPIO_ButtonInit+0x54>)
 8000cbc:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000cbe:	230d      	movs	r3, #13
 8000cc0:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff fb98 	bl	8000408 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOA;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <GPIO_ButtonInit+0x58>)
 8000cda:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000cec:	2300      	movs	r3, #0
 8000cee:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	4807      	ldr	r0, [pc, #28]	; (8000d10 <GPIO_ButtonInit+0x5c>)
 8000cf4:	f7ff fab8 	bl	8000268 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000cf8:	463b      	mov	r3, r7
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fb84 	bl	8000408 <GPIO_Init>

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020c00 	.word	0x40020c00

08000d14 <delay>:

void delay(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	e002      	b.n	8000d26 <delay+0x12>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3301      	adds	r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <delay+0x28>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d9f8      	bls.n	8000d20 <delay+0xc>
}
 8000d2e:	bf00      	nop
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	0003d08f 	.word	0x0003d08f

08000d40 <main>:


int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000d44:	f7ff ffb6 	bl	8000cb4 <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000d48:	f7ff ff92 	bl	8000c70 <USART2_GPIOInit>

    USART2_Init();
 8000d4c:	f7ff ff6e 	bl	8000c2c <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 8000d50:	2101      	movs	r1, #1
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <main+0x40>)
 8000d54:	f7ff fea5 	bl	8000aa2 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while(  GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000d58:	bf00      	nop
 8000d5a:	210d      	movs	r1, #13
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <main+0x44>)
 8000d5e:	f7ff fce5 	bl	800072c <GPIO_ReadFromInputPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d1f8      	bne.n	8000d5a <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000d68:	f7ff ffd4 	bl	8000d14 <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <main+0x48>)
 8000d6e:	f7ff fa49 	bl	8000204 <strlen>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	4904      	ldr	r1, [pc, #16]	; (8000d88 <main+0x48>)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <main+0x4c>)
 8000d7a:	f7ff ff08 	bl	8000b8e <USART_SendData>
		while(  GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000d7e:	e7eb      	b.n	8000d58 <main+0x18>
 8000d80:	40004400 	.word	0x40004400
 8000d84:	40020800 	.word	0x40020800
 8000d88:	20000014 	.word	0x20000014
 8000d8c:	20000430 	.word	0x20000430

08000d90 <__libc_init_array>:
 8000d90:	b570      	push	{r4, r5, r6, lr}
 8000d92:	4d0d      	ldr	r5, [pc, #52]	; (8000dc8 <__libc_init_array+0x38>)
 8000d94:	4c0d      	ldr	r4, [pc, #52]	; (8000dcc <__libc_init_array+0x3c>)
 8000d96:	1b64      	subs	r4, r4, r5
 8000d98:	10a4      	asrs	r4, r4, #2
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	42a6      	cmp	r6, r4
 8000d9e:	d109      	bne.n	8000db4 <__libc_init_array+0x24>
 8000da0:	4d0b      	ldr	r5, [pc, #44]	; (8000dd0 <__libc_init_array+0x40>)
 8000da2:	4c0c      	ldr	r4, [pc, #48]	; (8000dd4 <__libc_init_array+0x44>)
 8000da4:	f000 f818 	bl	8000dd8 <_init>
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	10a4      	asrs	r4, r4, #2
 8000dac:	2600      	movs	r6, #0
 8000dae:	42a6      	cmp	r6, r4
 8000db0:	d105      	bne.n	8000dbe <__libc_init_array+0x2e>
 8000db2:	bd70      	pop	{r4, r5, r6, pc}
 8000db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000db8:	4798      	blx	r3
 8000dba:	3601      	adds	r6, #1
 8000dbc:	e7ee      	b.n	8000d9c <__libc_init_array+0xc>
 8000dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dc2:	4798      	blx	r3
 8000dc4:	3601      	adds	r6, #1
 8000dc6:	e7f2      	b.n	8000dae <__libc_init_array+0x1e>
 8000dc8:	08000df0 	.word	0x08000df0
 8000dcc:	08000df0 	.word	0x08000df0
 8000dd0:	08000df0 	.word	0x08000df0
 8000dd4:	08000df4 	.word	0x08000df4

08000dd8 <_init>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

08000de4 <_fini>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr
